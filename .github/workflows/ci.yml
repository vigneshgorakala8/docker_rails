name: CI

on:
  pull_request:
  push:
    branches: [ main ]

jobs:
  scan_ruby:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Build devcontainer image
        run: docker build -f .devcontainer/Dockerfile -t rails-devcontainer .

      - name: Run Brakeman security scan
        run: |
          docker run --rm -v ${{ github.workspace }}:/rails -w /rails --user root rails-devcontainer \
            bash -c "
              chown -R rails:rails /rails &&
              su rails -c 'bundle install --jobs 4 --retry 3 && bin/brakeman --no-pager'
            "

  scan_js:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Build devcontainer image
        run: docker build -f .devcontainer/Dockerfile -t rails-devcontainer .

      - name: Run importmap audit
        run: |
          docker run --rm -v ${{ github.workspace }}:/rails -w /rails --user root rails-devcontainer \
            bash -c "
              chown -R rails:rails /rails &&
              su rails -c 'bundle install --jobs 4 --retry 3 && bin/importmap audit'
            "

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Build devcontainer image
        run: docker build -f .devcontainer/Dockerfile -t rails-devcontainer .

      - name: Run RuboCop linting
        run: |
          docker run --rm -v ${{ github.workspace }}:/rails -w /rails --user root rails-devcontainer \
            bash -c "
              chown -R rails:rails /rails &&
              su rails -c 'bundle install --jobs 4 --retry 3 && bin/rubocop -f github'
            "

  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: docker_rails_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Build devcontainer image
        run: docker build -f .devcontainer/Dockerfile -t rails-devcontainer .

      - name: Run tests in devcontainer
        env:
          RAILS_ENV: test
          DATABASE_URL: postgres://postgres:password@localhost:5432/docker_rails_test
          REDIS_URL: redis://localhost:6379/1
        run: |
          docker run --rm -v ${{ github.workspace }}:/rails -w /rails --user root \
            --network host \
            -e RAILS_ENV=test \
            -e DATABASE_URL=postgres://postgres:password@localhost:5432/docker_rails_test \
            -e REDIS_URL=redis://localhost:6379/1 \
            rails-devcontainer \
            bash -c "
              chown -R rails:rails /rails &&
              su rails -c '
                bundle install --jobs 4 --retry 3 &&
                bin/rails db:create db:migrate RAILS_ENV=test &&
                bundle exec rspec --format documentation &&
                bin/rails test:system
              '
            "

      - name: Keep screenshots from failed system tests
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: screenshots
          path: ${{ github.workspace }}/tmp/screenshots
          if-no-files-found: ignore
